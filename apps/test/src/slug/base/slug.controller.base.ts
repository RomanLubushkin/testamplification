/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SlugService } from "../slug.service";
import { SlugCreateInput } from "./SlugCreateInput";
import { Slug } from "./Slug";
import { SlugFindManyArgs } from "./SlugFindManyArgs";
import { SlugWhereUniqueInput } from "./SlugWhereUniqueInput";
import { SlugUpdateInput } from "./SlugUpdateInput";

export class SlugControllerBase {
  constructor(protected readonly service: SlugService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Slug })
  async createSlug(@common.Body() data: SlugCreateInput): Promise<Slug> {
    return await this.service.createSlug({
      data: data,
      select: {
        createdAt: true,
        desc: true,
        iconUrl: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Slug] })
  @ApiNestedQuery(SlugFindManyArgs)
  async slugs(@common.Req() request: Request): Promise<Slug[]> {
    const args = plainToClass(SlugFindManyArgs, request.query);
    return this.service.slugs({
      ...args,
      select: {
        createdAt: true,
        desc: true,
        iconUrl: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Slug })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async slug(
    @common.Param() params: SlugWhereUniqueInput
  ): Promise<Slug | null> {
    const result = await this.service.slug({
      where: params,
      select: {
        createdAt: true,
        desc: true,
        iconUrl: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Slug })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSlug(
    @common.Param() params: SlugWhereUniqueInput,
    @common.Body() data: SlugUpdateInput
  ): Promise<Slug | null> {
    try {
      return await this.service.updateSlug({
        where: params,
        data: data,
        select: {
          createdAt: true,
          desc: true,
          iconUrl: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Slug })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSlug(
    @common.Param() params: SlugWhereUniqueInput
  ): Promise<Slug | null> {
    try {
      return await this.service.deleteSlug({
        where: params,
        select: {
          createdAt: true,
          desc: true,
          iconUrl: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
