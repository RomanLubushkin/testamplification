/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Slug } from "./Slug";
import { SlugCountArgs } from "./SlugCountArgs";
import { SlugFindManyArgs } from "./SlugFindManyArgs";
import { SlugFindUniqueArgs } from "./SlugFindUniqueArgs";
import { CreateSlugArgs } from "./CreateSlugArgs";
import { UpdateSlugArgs } from "./UpdateSlugArgs";
import { DeleteSlugArgs } from "./DeleteSlugArgs";
import { SlugService } from "../slug.service";
@graphql.Resolver(() => Slug)
export class SlugResolverBase {
  constructor(protected readonly service: SlugService) {}

  async _slugsMeta(
    @graphql.Args() args: SlugCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Slug])
  async slugs(@graphql.Args() args: SlugFindManyArgs): Promise<Slug[]> {
    return this.service.slugs(args);
  }

  @graphql.Query(() => Slug, { nullable: true })
  async slug(@graphql.Args() args: SlugFindUniqueArgs): Promise<Slug | null> {
    const result = await this.service.slug(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Slug)
  async createSlug(@graphql.Args() args: CreateSlugArgs): Promise<Slug> {
    return await this.service.createSlug({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Slug)
  async updateSlug(@graphql.Args() args: UpdateSlugArgs): Promise<Slug | null> {
    try {
      return await this.service.updateSlug({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Slug)
  async deleteSlug(@graphql.Args() args: DeleteSlugArgs): Promise<Slug | null> {
    try {
      return await this.service.deleteSlug(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
